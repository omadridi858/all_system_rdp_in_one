name: CI

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Choose the operating system'
        required: true
        default: 'ubuntu-latest'
        options:
          - windows-latest
          - ubuntu-latest
          - macos-latest
          - freebsd-latest
          - raspberry-pi
      sdk:
        description: 'Choose the SDK to install'
        required: true
        default: 'python'
        options:
          - go
          - nodejs
          - rust
          - python
          - java
          - ruby
          - dotnet
      infra:
        description: 'Choose the infrastructure to setup'
        required: true
        default: 'docker'
        options:
          - docker
          - kubernetes

jobs:
  build:
    runs-on: ${{ github.event.inputs.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download Ngrok
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        } elseif ($env:RUNNER_OS -eq "Linux" -or $env:RUNNER_OS -eq "macOS") {
          curl -o ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
        } elseif ($env:RUNNER_OS -eq "macOS") {
          curl -o ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip
        }
    - name: Extract Ngrok
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          Expand-Archive ngrok.zip -DestinationPath ngrok
        } else {
          unzip ngrok.zip -d ngrok
        }
    - name: Authenticate Ngrok
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          .\ngrok\ngrok.exe authtoken $env:NGROK_AUTH_TOKEN
        } else {
          ./ngrok/ngrok authtoken $env:NGROK_AUTH_TOKEN
        }
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable RDP
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
        } elseif ($env:RUNNER_OS -eq "Linux") {
          sudo apt update
          sudo apt install -y xrdp
          sudo systemctl enable xrdp
          sudo ufw allow ssh
          sudo useradd -m -s /bin/bash runneradmin
          echo "runneradmin:P@ssw0rd!" | sudo chpasswd
        } elseif ($env:RUNNER_OS -eq "macOS") {
          brew install xrdp
          sudo xrdp --install
          sudo /etc/init.d/xrdp start
        }
    - name: Print Connection Details
      if: runner.os == 'Linux'
      run: |
        whoami
        echo "User: runneradmin"
        echo "Password: P@ssw0rd!"
        echo "IP: $(curl -s ifconfig.me)"
        echo "Port: 3389"
        echo "RDP Address:"
        curl --silent --show-error http://127.0.0.1:3389/api/tunnels | sed -nE 's/.*public_url":"tcp:..([^"]*).*/\1/p'


    - name: Create Ngrok Tunnel
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          .\ngrok\ngrok.exe tcp 3389
        } else {
          ./ngrok/ngrok tcp 3389
        }

