name: CI

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Choose the operating system'
        required: true
        default: 'ubuntu-latest'
        options:
          - windows-latest
          - ubuntu-latest
          - macos-latest
          - freebsd-latest
          - raspberry-pi
      sdk:
        description: 'Choose the SDK to install'
        required: true
        default: 'python'
        options:
          - go
          - nodejs
          - rust
          - python
          - java
          - ruby
          - dotnet
      infra:
        description: 'Choose the infrastructure to setup'
        required: true
        default: 'docker'
        options:
          - docker
          - kubernetes
      authcode:
        description: 'Visit https://remotedesktop.google.com/headless & paste the authorization code'
        required: true
      pincode:
        description: 'Enter a pin code'
        default: '123456'
        required: true
      authtoken:
        description: 'NGROK_AUTH_TOKEN'
        required: true
      computername:
        description: 'MACHINE_NAME'
        default: 'ubuntu'
        required: true
      username:
        description: 'USER_NAME'
        default: 'user'
        required: true
      password:
        description: 'USER_PASSWORD'
        default: 'root'
        required: true

jobs:
  build:
    runs-on: ${{ github.event.inputs.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Mask Secrets
      run: |
        echo NGROK_AUTH_TOKEN=${{ github.event.inputs.authtoken }} >> $GITHUB_ENV
        echo COMPUTER_NAME=${{ github.event.inputs.computername }} >> $GITHUB_ENV
        echo USERNAME=${{ github.event.inputs.username }} >> $GITHUB_ENV
        echo PASSWORD=${{ github.event.inputs.password }} >> $GITHUB_ENV

    - name: Setup Environment
      run: |
        sudo apt-get update
        sudo apt-get upgrade -y

    - name: Install Desktop Environment and Services
      if: runner.os == 'Linux'
      run: |
        sudo apt-get install -y xfce4 xfce4-goodies xrdp
        sudo systemctl enable xrdp
        sudo ufw allow 3389/tcp
        sudo adduser $USERNAME
        echo "$USERNAME:$PASSWORD" | sudo chpasswd
        sudo usermod -aG sudo $USERNAME
        echo "exec xfce4-session" | sudo tee /etc/xrdp/startwm.sh

    - name: Install Ngrok
      if: runner.os == 'Linux'
      run: |
        curl -o ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
        unzip ngrok.zip
        chmod +x ngrok
        ./ngrok authtoken ${{ github.event.inputs.authtoken }}

    - name: Start Ngrok Tunnel
      if: runner.os == 'Linux'
      run: |
        ./ngrok tcp 3389 --log "ngrok.log" &
        sleep 10

    - name: Print Connection Details
      if: runner.os == 'Linux'
      run: |
        echo "User: ${{ github.event.inputs.username }}"
        echo "Password: ${{ github.event.inputs.password }}"
        echo "IP: $(curl -s ifconfig.me)"
        echo "Port: 3389"
        grep -o -E "tcp://(.+)" ngrok.log | sed "s/tcp:\/\//ssh ${{ github.event.inputs.username }}@/" | sed "s/:/ -p /"

    - name: Setup SDKs
      env:
        NGROK_AUTH_TOKEN: ${{ github.event.inputs.authtoken }}
        COMPUTER_NAME: ${{ github.event.inputs.computername }}
        USERNAME: ${{ github.event.inputs.username }}
        PASSWORD: ${{ github.event.inputs.password }}
      run: |
        if [ "${{ github.event.inputs.sdk }}" == "go" ]; then
          curl -OL https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
        elif [ "${{ github.event.inputs.sdk }}" == "nodejs" ]; then
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt install -y nodejs
        elif [ "${{ github.event.inputs.sdk }}" == "rust" ]; then
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        elif [ "${{ github.event.inputs.sdk }}" == "python" ]; then
          sudo apt-get install -y python3
        elif [ "${{ github.event.inputs.sdk }}" == "java" ]; then
          sudo apt install -y default-jdk
        elif [ "${{ github.event.inputs.sdk }}" == "ruby" ]; then
          sudo apt install -y ruby-full
        elif [ "${{ github.event.inputs.sdk }}" == "dotnet" ]; then
          sudo apt-get install -y dotnet-sdk-5.0
        fi



    - name: Setup Infrastructure
      run: |
        if ( "${{ github.event.inputs.infra }}" == "docker" ){
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        } elif ( "${{ github.event.inputs.infra }}" == "kubernetes" ){
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        }
