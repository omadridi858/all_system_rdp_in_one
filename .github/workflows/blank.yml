name: CI

on:
  workflow_dispatch:
    inputs:
      os:
        description: 'Choose the operating system'
        required: true
        default: 'ubuntu-latest'
        options:
          - windows-latest
          - ubuntu-latest
          - macos-latest
          - freebsd-latest
          - raspberry-pi
      sdk:
        description: 'Choose the SDK to install'
        required: true
        default: 'python'
        options:
          - go
          - nodejs
          - rust
          - python
          - java
          - ruby
          - dotnet
      infra:
        description: 'Choose the infrastructure to setup'
        required: true
        default: 'docker'
        options:
          - docker
          - kubernetes

jobs:
  build:
    runs-on: ${{ github.event.inputs.os }}

    steps:
    - name: Checkout repository
      uses: actions/checkout@v3

    - name: Download Ngrok
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          Invoke-WebRequest https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-windows-amd64.zip -OutFile ngrok.zip
        } elseif ($env:RUNNER_OS -eq "Linux" -or $env:RUNNER_OS -eq "macOS") {
          curl -o ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-linux-amd64.zip
        } elseif ($env:RUNNER_OS -eq "macOS") {
          curl -o ngrok.zip https://bin.equinox.io/c/bNyj1mQVY4c/ngrok-v3-stable-darwin-amd64.zip
        }

    - name: Extract Ngrok
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          Expand-Archive ngrok.zip -DestinationPath ngrok
        } else {
          unzip ngrok.zip -d ngrok
        }

    - name: Authenticate Ngrok
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          .\ngrok\ngrok.exe authtoken $env:NGROK_AUTH_TOKEN
        } else {
          ./ngrok/ngrok authtoken $env:NGROK_AUTH_TOKEN
        }
      env:
        NGROK_AUTH_TOKEN: ${{ secrets.NGROK_AUTH_TOKEN }}

    - name: Enable RDP
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server' -name "fDenyTSConnections" -Value 0
          Enable-NetFirewallRule -DisplayGroup "Remote Desktop"
          Set-ItemProperty -Path 'HKLM:\System\CurrentControlSet\Control\Terminal Server\WinStations\RDP-Tcp' -name "UserAuthentication" -Value 1
          Set-LocalUser -Name "runneradmin" -Password (ConvertTo-SecureString -AsPlainText "P@ssw0rd!" -Force)
        } elseif ($env:RUNNER_OS -eq "Linux") {
          sudo apt update
          sudo apt install -y xrdp
          sudo systemctl enable xrdp
          sudo ufw allow 3389/tcp
        } elseif ($env:RUNNER_OS -eq "macOS") {
          brew install xrdp
          sudo xrdp --install
          sudo /etc/init.d/xrdp start
        }

    - name: Create Ngrok Tunnel
      shell: pwsh
      run: |
        if ($env:RUNNER_OS -eq "Windows") {
          .\ngrok\ngrok.exe tcp 3389
        } else {
          ./ngrok/ngrok tcp 3389
        }

    - name: Setup SDKs
      shell: pwsh
      run: |
        if ($env:SDK -eq "go") {
          curl -OL https://golang.org/dl/go1.16.5.linux-amd64.tar.gz
          sudo tar -C /usr/local -xzf go1.16.5.linux-amd64.tar.gz
          export PATH=$PATH:/usr/local/go/bin
        } elseif ($env:SDK -eq "nodejs") {
          curl -sL https://deb.nodesource.com/setup_14.x | sudo -E bash -
          sudo apt install -y nodejs
        } elseif ($env:SDK -eq "rust") {
          curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh
        } elseif ($env:SDK -eq "python") {
          sudo apt-get update && sudo apt-get install python3
        } elseif ($env:SDK -eq "java") {
          sudo apt install default-jdk -y
        } elseif ($env:SDK -eq "ruby") {
          sudo apt install ruby-full
        } elseif ($env:SDK -eq "dotnet") {
          sudo apt-get install -y dotnet-sdk-5.0
        }

    - name: Setup Infrastructure
      shell: pwsh
      run: |
        if ($env:INFRA -eq "docker") {
          sudo apt-get update
          sudo apt-get install -y docker-ce docker-ce-cli containerd.io
        } elseif ($env:INFRA -eq "kubernetes") {
          curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
          sudo install -o root -g root -m 0755 kubectl /usr/local/bin/kubectl
        }
